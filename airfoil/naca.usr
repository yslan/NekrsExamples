c-----------------------------------------------------------------------
      subroutine userchk
      implicit none
      include 'SIZE'
      include 'TOTAL'
      
      real p_u0, p_aoa, p_cos_aoa, p_sin_aoa
      common /casevars/ p_u0, p_aoa, p_cos_aoa, p_sin_aoa

      real visc_tmp
      common /SCRNS/ visc_tmp(lx1,ly1,lz1,lelv)

      COMMON /NRSSCPTR/ nrs_scptr(1)
      integer*8         nrs_scptr

      integer n
      real ubar,ebar,glsc2,opnorm2
      real uxmin,uymin,uzmin,prmin
     $   , uxmax,uymax,uzmax,prmax, glmin,glmax

      real scale
      real x0(3)
      save x0
      data x0 /3*0/

      n = lx1*ly1*lz1*nelv

      call copy(vdiff, visc_tmp, n) ! copy viscosiyty from nekrs to nek5k

      if (istep.eq.0) call set_obj('W  ') !

c     call test_var ! dbg-print

      scale = 2.0 ! CD = F/(.5 rho U^2 ) = 2*F
      call torque_calc(scale,x0,.true.,.false.) 

      ubar = glsc2(vx,bm1,n) / volvm1
      ebar = opnorm2(vx,vy,vz) ! sqrt( int u^2 v^2 w^2 / vol )

      uxmin = glmin(vx,n)
      uymin = glmin(vy,n)
      uzmin = glmin(vz,n)
      prmin = glmin(pr,lx2*ly2*lz2*nelv)
      uxmax = glmax(vx,n)
      uymax = glmax(vy,n)
      uzmax = glmax(vz,n)
      prmax = glmax(pr,lx2*ly2*lz2*nelv)

      if (nio.eq.0) then
        write(*,*) 'chk(5k) bar:',istep,time,ubar,ebar
     $           , 'Vx:', uxmin, uxmax
     $           , 'Vy:', uymin, uymax
     $           , 'Vz:', uzmin, uzmax
     $           , 'Pr:', prmin, prmax
      endif
      return
      end
c-----------------------------------------------------------------------
      subroutine set_obj(s3)  ! define objects for surface integrals
c
      include 'SIZE'
      include 'TOTAL'
c
      character*3 s3
      integer e,f
c
c     Define new objects
c
      nobj = 1                  ! for Periodic
      iobj = 0
      do ii=nhis+1,nhis+nobj
         iobj = iobj+1
         hcode(10,ii) = 'I'
         hcode( 1,ii) = 'F' ! 'F'
         hcode( 2,ii) = 'F' ! 'F'
         hcode( 3,ii) = 'F' ! 'F'
         lochis(1,ii) = iobj
      enddo
      nhis = nhis + nobj
c
      if (maxobj.lt.nobj) write(6,*) 'increase maxobj in SIZEu. rm *.o'
      if (maxobj.lt.nobj) call exitt
c
      nxyz = nx1*ny1*nz1
      do e=1,nelv
      do f=1,2*ndim
         if (cbc(f,e,1).eq.s3) then ! define obj by BC 
            iobj = 1
c           if (f.eq.1) iobj=1  ! lower wall
c           if (f.eq.3) iobj=2  ! upper wall
            if (iobj.gt.0) then
               nmember(iobj) = nmember(iobj) + 1
               mem = nmember(iobj)
               ieg = lglel(e)
               object(iobj,mem,1) = ieg
               object(iobj,mem,2) = f
c              write(6,1) iobj,mem,f,ieg,e,nid,' OBJ'
    1          format(6i9,a4)
            endif
c
         endif
      enddo
      enddo
c     write(6,*) 'number',(nmember(k),k=1,4)
c
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,iside,e,eg

      real p_u0, p_aoa, p_cos_aoa, p_sin_aoa
      common /casevars/ p_u0, p_aoa, p_cos_aoa, p_sin_aoa

      e = gllel(eg)

      ux = p_u0*p_cos_aoa
      uz = p_u0*p_sin_aoa
      uy = 0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg

      real p_u0, p_aoa, p_cos_aoa, p_sin_aoa
      common /casevars/ p_u0, p_aoa, p_cos_aoa, p_sin_aoa

      e = gllel(eg)
      ux = p_u0*p_cos_aoa
      uz = p_u0*p_sin_aoa
      uy = 0.0
      temp=0.0 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      implicit none
      include 'SIZE'
      include 'TOTAL'

      common /scnrs/ sc_nrs(10)
      real           sc_nrs
      
      COMMON /NRSSCPTR/ nrs_scptr(1) 
      integer*8         nrs_scptr

      real p_u0, p_aoa, p_cos_aoa, p_sin_aoa
      common /casevars/ p_u0, p_aoa, p_cos_aoa, p_sin_aoa

      real visc_tmp
      common /SCRNS/ visc_tmp(lx1,ly1,lz1,lelv)

      real scale
      integer iel, ifc, id_face, ntot

      nrs_scptr(1) = loc(visc_tmp)

      p_u0      = sc_nrs(1)
      p_aoa     = sc_nrs(2)
      p_cos_aoa = sc_nrs(3)
      p_sin_aoa = sc_nrs(4)
      if (nio.eq.0) write(*,*)'chk(5k) aoa'
     $                       ,p_u0,p_aoa,p_cos_aoa,p_sin_aoa

      ntot = nx1*ny1*nz1*nelt

      scale = 1./275.8 ! This will yield mean aerodynamic chord = 1
      call cmult(xm1,scale,ntot)
      call cmult(ym1,scale,ntot)
      call cmult(zm1,scale,ntot)

      !Set all non-periodic BCs here. This is required by gmsh2nek
      do iel=1,nelv
         do ifc=1,2*ndim
            id_face = bc(5,ifc,iel,1)
            if (id_face.eq.1) then        ! BC1_on_XMIN
               cbc(ifc,iel,1) = 'v  '
               boundaryID(ifc,iel) = 1
            elseif (id_face.eq.2) then    ! BC1_on_SYMMETRY
               cbc(ifc,iel,1) = 'SYM'
               boundaryID(ifc,iel) = 4
            elseif (id_face.eq.3) then    ! BC1_on_FUSELAGE 
               cbc(ifc,iel,1) = 'W  '
               boundaryID(ifc,iel) = 3
            elseif (id_face.eq.4) then    ! BC1_on_XMAX
               cbc(ifc,iel,1) = 'O  '
               boundaryID(ifc,iel) = 2
            elseif (id_face.eq.5) then    ! BC1_on_YMAX
               cbc(ifc,iel,1) = 'v  '
               boundaryID(ifc,iel) = 1
            elseif (id_face.eq.6) then    ! BC1_on_ZMAX
               cbc(ifc,iel,1) = 'v  '
               boundaryID(ifc,iel) = 1
            elseif (id_face.eq.7) then    ! BC1_on_ZMIN
               cbc(ifc,iel,1) = 'v  '
               boundaryID(ifc,iel) = 1
            elseif (id_face.eq.8) then    ! BC1_on_WINGTE_IB
               cbc(ifc,iel,1) = 'W  '
               boundaryID(ifc,iel) = 3
            elseif (id_face.eq.9) then    ! BC1_on_WINGTE_OB
               cbc(ifc,iel,1) = 'W  '
               boundaryID(ifc,iel) = 3
            elseif (id_face.eq.10) then    ! BC1_on_WING_TIP
               cbc(ifc,iel,1) = 'W  '
               boundaryID(ifc,iel) = 3
            elseif (id_face.eq.11) then    ! BC1_on_WING_UPPER
               cbc(ifc,iel,1) = 'W  '
               boundaryID(ifc,iel) = 3
            elseif (id_face.eq.12) then    ! BC1_on_WING_LOWER
               cbc(ifc,iel,1) = 'W  '
               boundaryID(ifc,iel) = 3
            else                          ! Zero-out everything else
               cbc(ifc,iel,1) = '   '
               boundaryID(ifc,iel) = 0
            endif
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine test_var
      include 'SIZE'
      include 'TOTAL'

      common /scrns/         sij (lx1*ly1*lz1,6,lelv)
      common /scrcg/         pm1 (lx1,ly1,lz1,lelv)
      common /scrsf/         xm0(lx1,ly1,lz1,lelt)
     $,                      ym0(lx1,ly1,lz1,lelt)
     $,                      zm0(lx1,ly1,lz1,lelt)
      
      parameter (lr=lx1*ly1*lz1)
      common /scruz/         ur(lr),us(lr),ut(lr)
     $                     , vr(lr),vs(lr),vt(lr)
     $                     , wr(lr),ws(lr),wt(lr)


      real sij_min(6), sij_max(6)

      nxyz = lx1*ly1*lz1
      n = nxyz * nelv

      call mappr(pm1,pr,xm0,ym0) ! map pressure onto Mesh 1

      nij = 3 
      if (if3d.or.ifaxis) nij=6
      call comp_sij(sij,nij,vx,vy,vz,ur,us,ut,vr,vs,vt,wr,ws,wt)


      do i=1,6
         sij_min(i) = 99.0E20
         sij_max(i) =-99.0E20
      enddo
      do ie=1,nelv
      do i=1,6
         sij_min(i) = min(sij_min(i), vlmin(sij(1,i,ie),nxyz))
         sij_max(i) = max(sij_max(i), vlmax(sij(1,i,ie),nxyz))
      enddo
      enddo

      do i=1,6
         sij_min(i) = glmin(sij_min(i),1)
         sij_max(i) = glmax(sij_max(i),1)
      enddo
      

      if (nio.eq.0) then
         write(*,*) '(5k)sij_min',istep,time,(sij_min(i),i=1,6)
         write(*,*) '(5k)sij_max',istep,time,(sij_max(i),i=1,6)
      endif

      visc_min = glmin(vdiff,n)
      visc_max = glmax(vdiff,n)
      if (nio.eq.0) then
         write(*,*) '(5k) visc   ',istep,time,visc_min,visc_max
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
