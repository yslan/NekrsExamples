//
// nekRS User Defined File
//
#include <numeric>
#include "udf.hpp"

// recycling inlets
using velInflowData = std::tuple<dlong, dfloat, dfloat, dfloat, dfloat>;
std::vector<velInflowData> velInflowList;

static occa::memory o_BdryID;
static occa::memory o_BdryToV;
static occa::memory o_Upart;

static pointInterpolation_t *interpolator = nullptr;
static occa::kernel getBCFluxKernel;
static occa::kernel sumReductionKernel;

static occa::memory o_flux, o_area;

static dfloat *tmp1, *tmp2;
static occa::memory o_tmp1, o_tmp2;

static int Nblock;

#ifdef __okl__

// recycling kernel start
@kernel void pasteInletVelocity(const dlong Npart,
                                const dlong fieldOffset,
                                @ restrict const dlong *BdryToV,
                                @ restrict const dfloat *Upart,
                                @ restrict dfloat *U)
{ 
  for (dlong n = 0; n < Npart; ++n; @tile(256, @outer, @inner)) {
    if (n < Npart) {
      const dlong v = BdryToV[n];
      U[0*fieldOffset + v] = Upart[0*Npart + n];
      U[1*fieldOffset + v] = Upart[1*Npart + n];
      U[2*fieldOffset + v] = Upart[2*Npart + n];
    }   
  } 
}

@kernel void scaleInletVelocity(const dlong Npart,
                                const dlong fieldOffset,
                                const dfloat scale,
                                const dlong bid,
                                @ restrict const dlong *BdryID,
                                @ restrict const dlong *BdryToV,
                                @ restrict dfloat *U)
{ 
  for (dlong n = 0; n < Npart; ++n; @tile(256, @outer, @inner)) {
    if (n < Npart) {
      const dlong v = BdryToV[n];
      const dlong id = BdryID[n];
      if (bid==id) {
        U[0*fieldOffset + v] *= scale;
        U[1*fieldOffset + v] *= scale;
        U[2*fieldOffset + v] *= scale;
      }
    }
  }
}
// recycling kernel ends

void velocityDirichletConditions(bcData *bc)
{
  bc->u = bc->usrwrk[bc->idM + 0 * bc->fieldOffset];
  bc->v = bc->usrwrk[bc->idM + 1 * bc->fieldOffset];
  bc->w = bc->usrwrk[bc->idM + 2 * bc->fieldOffset];
}

// Stabilized outflow (Dong et al)
void pressureDirichletConditions(bcData *bc)
{
  const dfloat iU0delta = 10.0;
  const dfloat un = bc->u * bc->nx + bc->v * bc->ny + bc->w * bc->nz;
  const dfloat s0 = 0.5 * (1.0 - tanh(un * iU0delta));
  bc->p = -0.5 * (bc->u * bc->u + bc->v * bc->v + bc->w * bc->w) * s0;
}

#endif

void setupRecycledInflow(nrs_t *nrs)
{
  mesh_t *mesh = nrs->meshV; 

  // count total number faces
  dlong nface = 0;
  for (auto &entry : velInflowList) {
    const dlong bidInlet = std::get<0>(entry);
    const dfloat dx = std::get<1>(entry);
    const dfloat dy = std::get<2>(entry);
    const dfloat dz = std::get<3>(entry);
    const dfloat targetUbar = std::get<4>(entry);
    dlong nfacei = 0;
    for (dlong e = 0; e<mesh->Nelements; e++) {
      for (int f = 0; f < mesh->Nfaces; f++) {
        if (mesh->EToB[f + mesh->Nfaces * e] == bidInlet) {
          nfacei++;
          nface++;
        }
      }
    }

    MPI_Allreduce(MPI_IN_PLACE, &nfacei, 1, MPI_DLONG, MPI_SUM, platform->comm.mpiComm);
    if (platform->comm.mpiRank==0)
      printf("setupRecycledInflow, bid = %d, nface = %d, dx = %g %g %g, ubar = %g\n",
             bidInlet, nfacei, dx, dy, dz, targetUbar);
  }

  const dlong npts = nface * mesh->Nfp;

  // allocate
  occa::memory o_xpart = platform->device.malloc(npts, sizeof(dfloat));
  occa::memory o_ypart = platform->device.malloc(npts, sizeof(dfloat));
  occa::memory o_zpart = platform->device.malloc(npts, sizeof(dfloat));
  o_BdryID  = platform->device.malloc(npts, sizeof(dlong));
  o_BdryToV = platform->device.malloc(npts, sizeof(dlong));
  o_Upart   = platform->device.malloc(nrs->NVfields * npts, sizeof(dfloat));

  const dlong NfpTotal = mesh->Nelements * mesh->Nfaces * mesh->Nfp;

  Nblock = (NfpTotal + BLOCKSIZE - 1) / BLOCKSIZE;
  tmp1 = (dfloat *)calloc(Nblock, sizeof(dfloat));
  tmp2 = (dfloat *)calloc(Nblock, sizeof(dfloat));
  o_tmp1 = platform->device.malloc(Nblock * sizeof(dfloat));
  o_tmp2 = platform->device.malloc(Nblock * sizeof(dfloat));
                         
  o_flux = platform->device.malloc(NfpTotal * sizeof(dfloat));
  o_area = platform->device.malloc(NfpTotal * sizeof(dfloat));

  {
    // set id mapping: from bdry to volume index
    std::vector<dlong> BdryID(npts, -1);
    std::vector<dlong> BdryToV(npts, -1);

    dlong ia = 0;
    for (auto &entry : velInflowList) {
      const dlong bidInlet = std::get<0>(entry);
      for (dlong e = 0; e < mesh->Nelements; e++) {
        for (int f = 0; f < mesh->Nfaces; f++) {
          if (mesh->EToB[f + mesh->Nfaces * e] == bidInlet) {
            const dlong offset = e * mesh->Nfaces * mesh->Nfp + f * mesh->Nfp;
            for (int v = 0; v < mesh->Nfp; v++) {
              BdryID[ia] = bidInlet;
              BdryToV[ia] = mesh->vmapM[offset + v];
              ia++;
            }
          }
        }
      }
    }
    o_BdryID.copyFrom(BdryID.data(), npts * sizeof(dlong));
    o_BdryToV.copyFrom(BdryToV.data(), npts * sizeof(dlong));

    // set location: from inlet to target location
    std::vector<dfloat> xpart(npts, 0.0);
    std::vector<dfloat> ypart(npts, 0.0);
    std::vector<dfloat> zpart(npts, 0.0);

    for (auto &entry : velInflowList) {
      const dlong bidInlet = std::get<0>(entry);
      const dfloat dx = std::get<1>(entry);
      const dfloat dy = std::get<2>(entry);
      const dfloat dz = std::get<3>(entry);
      for (dlong i = 0; i < npts; i++) {
        const dlong bid = BdryID[i];
        const dlong v = BdryToV[i];
        if (bid == bidInlet) {
          xpart[i] = mesh->x[v] + dx;
          ypart[i] = mesh->y[v] + dy;
          zpart[i] = mesh->z[v] + dz;
        }
      }
    }
    o_xpart.copyFrom(xpart.data(), npts * sizeof(dfloat));
    o_ypart.copyFrom(ypart.data(), npts * sizeof(dfloat));
    o_zpart.copyFrom(zpart.data(), npts * sizeof(dfloat));
  }

  interpolator = new pointInterpolation_t(nrs);
  interpolator->setPoints(npts, o_xpart, o_ypart, o_zpart);
  interpolator->find();
}

void updateRecycledVelocity(nrs_t *nrs, int verbose)
{
  mesh_t *mesh = nrs->meshV;
  const dlong NfpTotal = mesh->Nelements * mesh->Nfaces * mesh->Nfp;
  dlong npts = interpolator->numPoints();
  interpolator->eval(nrs->NVfields, nrs->fieldOffset, nrs->o_U, npts, o_Upart);

  pasteInletVelocity(npts,
                     nrs->fieldOffset,
                     o_BdryToV,
                     o_Upart,
                     nrs->o_usrwrk);

  // rescale
  for (auto &entry : velInflowList) {
    const dlong bidInlet = std::get<0>(entry);
    const dfloat targetUbar = std::get<4>(entry);

    getBCFluxKernel(mesh->Nelements,
                    bidInlet,
                    nrs->fieldOffset,
                    nrs->o_usrwrk,
                    mesh->o_vmapM,
                    mesh->o_EToB,
                    mesh->o_sgeo,
                    o_area,
                    o_flux);
  
    sumReductionKernel(NfpTotal, o_area, o_flux, o_tmp1, o_tmp2);

    o_tmp1.copyTo(tmp1);
    o_tmp2.copyTo(tmp2);
    dfloat sbuf[2] = {0, 0};
    for (int n = 0; n < Nblock; n++) {
      sbuf[0] += tmp1[n]; // area
      sbuf[1] += tmp2[n]; // flux
    }
    MPI_Allreduce(MPI_IN_PLACE, sbuf, 2, MPI_DFLOAT, MPI_SUM, platform->comm.mpiComm);

    const dfloat scale = -targetUbar * sbuf[0] / sbuf[1];
    scaleInletVelocity(npts,
                       nrs->fieldOffset,
                       scale,
                       bidInlet,
                       o_BdryID,
                       o_BdryToV,
                       nrs->o_usrwrk);

    if (verbose>0 && platform->comm.mpiRank==0)
      printf("updateRecycledVelocity, bid = %d, targetUbar = %g, area = %g flux = %g scale = %g\n",
             bidInlet, targetUbar, sbuf[0], sbuf[1], scale);
  }
}

void UDF_LoadKernels(occa::properties &kernelInfo)
{
  const std::string path = getenv("NEKRS_KERNEL_DIR") + std::string("/plugins/");
  
  std::string fileName, kernelName;
  const std::string extension = ".okl";
  { 
    kernelName = "getBCFlux";
    fileName = path + kernelName + extension;
    getBCFluxKernel = platform->device.buildKernel(fileName, kernelInfo, true);
    
    kernelName = "sumReduction"; 
    fileName = path + kernelName + extension;
    sumReductionKernel = platform->device.buildKernel(fileName, kernelInfo, true);
  }
}

void UDF_Setup(nrs_t *nrs)
{
  nrs->o_usrwrk = platform->device.malloc(nrs->NVfields * nrs->fieldOffset, sizeof(dfloat));

  // Each entity is a set of {bID, dx, dy, dz, targetUbar}
  velInflowList.push_back(std::tuple{1, 5.0, 0.0, 0.0, 1.0});
  setupRecycledInflow(nrs);
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  int verbose = (tstep % 10 == 0) ? 1 : 0;
  updateRecycledVelocity(nrs, verbose);

  // chk: Compute perturbation energy
  occa::memory o_UX = nrs->o_U + 0 * nrs->fieldOffset * sizeof(dfloat);
  occa::memory o_UY = nrs->o_U + 1 * nrs->fieldOffset * sizeof(dfloat);
  occa::memory o_UZ = nrs->o_U + 2 * nrs->fieldOffset * sizeof(dfloat);

  mesh_t *mesh = nrs->meshV;
  const dfloat ub = platform->linAlg->innerProd(mesh->Nlocal, o_UX, mesh->o_LMM, platform->comm.mpiComm) / mesh->volume;
  const dfloat e2y = platform->linAlg->weightedNorm2(mesh->Nlocal, mesh->o_LMM, o_UY, platform->comm.mpiComm);
  const dfloat e2z = platform->linAlg->weightedNorm2(mesh->Nlocal, mesh->o_LMM, o_UZ, platform->comm.mpiComm);
  const dfloat e2 = (e2y*e2y + e2z*e2z) / mesh->volume;
  const dfloat um = platform->linAlg->amax(mesh->Nlocal, o_UX, platform->comm.mpiComm);

  if (platform->comm.mpiRank==0)
    printf("%6d %13.5e %13.5e %13.5e %13.5e e2(rs)\n",tstep,time,e2,ub,um);

  // chk: Nek5000
  if (nrs->isOutputStep) {
    nek::ocopyToNek(time, tstep);
    nek::userchk(); 
  }
}
