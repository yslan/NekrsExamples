@kernel void scalarScaledAdd(const dlong N,
                             const dfloat a,
                             const dfloat b,
                             @ restrict const dfloat *X,
                             @ restrict dfloat *Y)
{
  for (dlong n = 0; n < N; ++n; @tile(256, @outer, @inner)) {
    if (n < N) {
      Y[n] = a + b * X[n];
    }
  }
}

void scalarDirichletConditions(bcData *bc)
{
  if (bc->id == 1) {
    if(bc->scalarId == 0) bc->s = 1.0;
    if(bc->scalarId == 1) bc->s = 0.01;
    if(bc->scalarId == 2) bc->s = 0.1;
  }
  if(bc->id == 2) bc->s = bc->sinterp;
  if(bc->id == 3) bc->s = 0.0;
}

void velocityDirichletConditions(bcData *bc)
{
  if (bc->id == 1){
    bc->u = 1.0;
    bc->v = 0.0;
    bc->w = 0.0;
  }
  if(bc->id == 2) {
    bc->u = bc->uinterp;
    bc->v = bc->vinterp;
    bc->w = bc->winterp;
  }
}
