@kernel void turbOutflowSetup(@restrict dfloat* msk,
                              @restrict dfloat* d,
                              const dfloat ddmax,
                              const dlong N)
{ 
  for(dlong n = 0; n < N; ++n; @tile(256,@outer,@inner)) {
    if(n < N) {
      if (d[n] < 0.0) {
         msk[n] = 1.0;
         d[n] = 0.0;
      } else {
         msk[n] = 0.0; 
         d[n] = (ddmax - d[n]) / ddmax;
      }
    }
  }
}

@kernel void turbOutflow(@restrict dfloat* div,
                         @restrict const dfloat* dist,
                         const dfloat cs,
                         const dlong N)
{ 
  for(dlong n = 0; n < N; ++n; @tile(256,@outer,@inner)) {
    if(n < N) {
      div[n] = cs * dist[n]*dist[n];
    }
  }
}


// Boundary conditions
void velocityDirichletConditions(bcData *bc)
{
  bc->u = 0.0;
  bc->v = 0.0;
  bc->w = 1.0;
}

// Stabilized outflow (Dong et al)
void pressureDirichletConditions(bcData *bc)
{
/*
  const dfloat iU0delta = 20.0;
  const dfloat un = bc->u * bc->nx + bc->v * bc->ny + bc->w * bc->nz;
  const dfloat s0 = 0.5 * (1.0 - tanh(un * iU0delta));
  bc->p = -0.5 * (bc->u * bc->u + bc->v * bc->v + bc->w * bc->w) * s0;
*/
}

void scalarDirichletConditions(bcData *bc)
{
  bc->s = 0.0;
}

void scalarNeumannConditions(bcData *bc)
{
  bc->flux = 1.0;
}
