#include <numeric>

static dfloat P_EPS, coef_a, coef_b;
static int coef_n;
static bool runBP5 = false;
static bool runBPS5 = false;
static bool runBP6 = false;
static bool prtRes = false;
static bool dumpSol = false;
static int bp5NReps, bps5NReps, bp6NReps;

#ifdef __okl__

#endif

void runBenchmarks(nrs_t *nrs)
{
  mesh_t *mesh = nrs->meshV;

  std::vector<dfloat> rhs, Pexact;
  rhs.reserve(nrs->fieldOffset);
  Pexact.reserve(nrs->fieldOffset);

  for (int i = 0; i < mesh->Nlocal; i++) {
    const dfloat xx=mesh->x[i], yy=mesh->y[i], zz=mesh->z[i];
    
    // k=0
    dfloat ak = 1.0;
    dfloat bk = 1.0;
    dfloat wx = cos(M_PI * (xx-0.5));
    dfloat wy = cos(M_PI * (yy-0.5));
    dfloat wz = cos(M_PI * (zz-0.5));
    dfloat ddwx = M_PI*M_PI*cos(M_PI * (xx-0.5));  // - d^2/dx^2 w(x)
    dfloat ddwy = M_PI*M_PI*cos(M_PI * (yy-0.5));
    dfloat ddwz = M_PI*M_PI*cos(M_PI * (zz-0.5));

    // k=1 to n
    for (int k=1; k<=coef_n; k++) {
      ak *= coef_a;
      bk *= coef_b;
      wx += ak * cos(bk*M_PI*(xx-0.5));
      wy += ak * cos(bk*M_PI*(yy-0.5));
      wz += ak * cos(bk*M_PI*(zz-0.5));
      ddwx += ak * bk*bk*M_PI*M_PI * cos(bk*M_PI*(xx-0.5));
      ddwy += ak * bk*bk*M_PI*M_PI * cos(bk*M_PI*(yy-0.5));
      ddwz += ak * bk*bk*M_PI*M_PI * cos(bk*M_PI*(zz-0.5));
    }

    rhs[i] = ddwx*wy*wz + wx*ddwy*wz + wx*wy*ddwz;
    Pexact[i] = wx * wy * wz;
  }
  deviceMemory<dfloat> o_rhs(nrs->NVfields * nrs->fieldOffset);
  o_rhs.copyFrom(rhs, nrs->fieldOffset, 0 * nrs->fieldOffset);
  o_rhs.copyFrom(rhs, nrs->fieldOffset, 1 * nrs->fieldOffset);
  o_rhs.copyFrom(rhs, nrs->fieldOffset, 2 * nrs->fieldOffset);
  platform->linAlg->axmyMany(mesh->Nlocal, nrs->NVfields, nrs->fieldOffset, 0, 1.0, mesh->o_LMM, o_rhs);

  deviceMemory<dfloat> o_lambda0(nrs->fieldOffset);
  deviceMemory<dfloat> o_lambda1(nrs->fieldOffset);
  platform->linAlg->fill(nrs->fieldOffset, 1.0, o_lambda0);
  platform->linAlg->fill(nrs->fieldOffset, 1.0, o_lambda1);

  deviceMemory<dfloat> o_Pexact(nrs->fieldOffset);
  o_Pexact.copyFrom(Pexact, nrs->fieldOffset);

  std::vector<std::string> benchmarks;
  if (runBPS5) {
    benchmarks.push_back("BPS5");
  }
  if (runBP5) {
    benchmarks.push_back("BP5");
  }
  if (runBP6) {
    benchmarks.push_back("BP6");
    benchmarks.push_back("BP6_PCGC");
  }

  if (platform->comm.mpiRank == 0) {
    std::cout << "\nrunning benchmarks\n";
  }

  for (auto &benchmark : benchmarks) {
    MPI_Barrier(platform->comm.mpiComm);
    if (platform->comm.mpiRank == 0) {
      std::cout << "\n" << benchmark << "\n";
    }

    elliptic *solver;

    int Nrep;
    if (benchmark == "BP5") {
      solver = nrs->pSolver;

      Nrep = bp5NReps;
      solver->options().setArgs("PRECONDITIONER", "NONE");
      solver->options().setArgs("SOLVER", "PCG");
      solver->options().setArgs("MAXIMUM ITERATIONS", "1000");
      solver->options().setArgs("SOLVER TOLERANCE", to_string_f(1e-15));
    }
    if (benchmark == "BPS5") {
      solver = nrs->pSolver;

      Nrep = bps5NReps;
      int maxIter = 500;
      if (platform->par->extract("pressure", "maxiterations", maxIter))
        solver->options().setArgs("MAXIMUM ITERATIONS", std::to_string(maxIter));
//      solver->options().setArgs("SOLVER TOLERANCE", to_string_f(1e-8));
//      solver->options().setArgs("LINEAR SOLVER STOPPING CRITERION", "RELATIVE");
    }
    if (benchmark == "BP6") {
      solver = nrs->uvwSolver;

      Nrep = bp6NReps;
      solver->options().setArgs("PRECONDITIONER", "NONE");
      solver->options().setArgs("BLOCK SOLVER", "TRUE");
      solver->options().setArgs("SOLVER", "PCG");
      solver->options().setArgs("MAXIMUM ITERATIONS", "1000");
      solver->options().setArgs("SOLVER TOLERANCE", to_string_f(1e-15));
    }
    if (benchmark == "BP6_PCGC") {
      solver = nrs->uvwSolver;

      Nrep = bp6NReps;
      solver->options().setArgs("PRECONDITIONER", "NONE");
      solver->options().setArgs("BLOCK SOLVER", "TRUE");
      solver->options().setArgs("SOLVER", "PCG+COMBINED");
      solver->options().setArgs("MAXIMUM ITERATIONS", "1000");
      solver->options().setArgs("SOLVER TOLERANCE", to_string_f(1e-15));
    }

    // chk convergence
    if (benchmark == "BPS5") {
      platform->linAlg->fill(nrs->fieldOffset, 0.0, nrs->o_P);

      int verbose_bak = platform->options.compareArgs("VERBOSE", "TRUE") ? 1 : 0;
      if (prtRes) platform->options.setArgs("VERBOSE", "TRUE");
      solver->solve(o_lambda0, o_lambda1, o_rhs, nrs->o_P);
      platform->options.setArgs("VERBOSE", "FALSE");
      if (verbose_bak) platform->options.setArgs("VERBOSE", "TRUE");

      nrs->o_U.copyFrom(o_Pexact, mesh->Nlocal, 0 * nrs->fieldOffset);
      nrs->o_U.copyFrom(o_Pexact, mesh->Nlocal, 1 * nrs->fieldOffset);
      nrs->o_U.copyFrom(o_rhs,    mesh->Nlocal, 2 * nrs->fieldOffset);

      platform->linAlg->axpby(mesh->Nlocal, -1.0, nrs->o_P, 1.0, nrs->o_U); // y=ax+by
      dfloat ErrL2 = platform->linAlg->weightedNorm2(mesh->Nlocal, mesh->o_LMM, nrs->o_U, platform->comm.mpiComm) / sqrt(mesh->volume);
      dfloat normP = platform->linAlg->weightedNorm2(mesh->Nlocal, mesh->o_LMM, o_Pexact, platform->comm.mpiComm) / sqrt(mesh->volume);

      if (platform->comm.mpiRank == 0) {
        printf("ErrChk: %s (n,a,b)=(%d,%g,%g) it=%d ErrL2=%.6e RelErrL2=%.6e \n"
              ,benchmark.c_str(),coef_n,coef_a,coef_b
              ,solver->Niter(),ErrL2,ErrL2/normP);
      }
      if (dumpSol) writeFld("out", 1.0, 1, 1, 1, nrs->o_U, nrs->o_P, o_NULL, 0, 0);
    }

    std::vector<double> eTime;
    std::vector<double> precoTime;
    std::vector<double> smootherTime;
    std::vector<double> crsTime;
    std::vector<int> Niters;

    for (int i = 0; i < Nrep; i++) {
      platform->linAlg->fill(nrs->NVfields * nrs->fieldOffset, 0.0, nrs->o_U);

      // warm-up
      solver->solve(o_lambda0, o_lambda1, o_rhs, nrs->o_U);

      platform->linAlg->fill(nrs->NVfields * nrs->fieldOffset, 0.0, nrs->o_U);

      platform->timer.reset();
      platform->flopCounter->clear();
      platform->device.finish();
      MPI_Barrier(platform->comm.mpiComm);

      const auto tStart = MPI_Wtime();
      solver->solve(o_lambda0, o_lambda1, o_rhs, nrs->o_U);
      platform->device.finish();
      platform->timer.set(solver->name() + "Solve", MPI_Wtime() - tStart);

      eTime.push_back(platform->timer.query(solver->name() + "Solve", "DEVICE:MAX"));
      precoTime.push_back(platform->timer.query(solver->name() + " preconditioner", "DEVICE:MAX"));
      for (int i = mesh->N; i > 0; i--) {
        const auto val =
            platform->timer.query(solver->name() + " preconditioner smoother N=" + std::to_string(i), "DEVICE:MAX");
        if (val > 0) {
          smootherTime.push_back(val);
        }
      }
      crsTime.push_back(platform->timer.query("coarseSolve", "DEVICE:MAX"));
      Niters.push_back(solver->Niter());
    }
    if (platform->comm.mpiRank == 0) {
      printf("\n");
    }

    hlong Ntotal = mesh->Nelements * pow(mesh->N, mesh->dim);
    MPI_Allreduce(MPI_IN_PLACE, &Ntotal, 1, MPI_HLONG, MPI_SUM, platform->comm.mpiComm);

    const auto minEntry = std::distance(eTime.begin(), std::min_element(eTime.begin(), eTime.end()));
    const int iter = Niters.at(minEntry);
    const int iterMin = *std::min_element(Niters.begin(), Niters.end());
    const int iterMax = *std::max_element(Niters.begin(), Niters.end());
    const double iterAvg = ((double) std::accumulate(Niters.begin(), Niters.end(), 0)) / Nrep;

    const double solveTime = eTime.at(minEntry);
    const double solveTimeMax = *std::max_element(eTime.begin(), eTime.end());
    const double solveTimeAvg = std::accumulate(eTime.begin(), eTime.end(), 0.0) / Nrep;
    const double throughput = ((solver->Nfields() * Ntotal) / solveTime) / platform->comm.mpiCommSize;
    const double flopsPerSecond = platform->flopCounter->get(platform->comm.mpiComm) / solveTime;

    if (platform->comm.mpiRank == 0) {
      printf("repetitions: %d\n", Nrep);
      printf("solve time: min: %gs  avg: %gs  max: %gs\n", solveTime, solveTimeAvg, solveTimeMax);
      if (precoTime.at(minEntry) > 0) {
        printf("  preconditioner %gs\n", precoTime.at(minEntry));
      }

      if (smootherTime.size()) {
        const auto mgLevels = smootherTime.size() / Nrep;
        for (int i = 0; i < mgLevels; i++) {
          const auto entry = minEntry * mgLevels + i;
          if (smootherTime.at(entry) > 0) {
            printf("    smoother %gs\n", smootherTime.at(entry));
          }
        }
        if (crsTime.at(minEntry) > 0) {
          printf("    coarse grid %gs\n", crsTime.at(minEntry));
        }
      }

      printf("iterations: %d (min: %d  max: %d  avg: %g)\n", iter,iterMin,iterMax,iterAvg);
      printf("throughput: %g (DOF x iter)/s/rank\n", (double)iter * throughput);
      if (benchmark == "BPS5") {
        printf("throughput: %g DOF/s/rank\n", throughput);
      }
      if (!solver->options().compareArgs("PRECONDITIONER", "SEMFEM")) {
        printf("flops/rank: %g \n", flopsPerSecond / platform->comm.mpiCommSize);
      }
    }
  }
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "eps", P_EPS);

  platform->par->extract("casedata", "coef_n", coef_n);
  platform->par->extract("casedata", "coef_a", coef_a);
  platform->par->extract("casedata", "coef_b", coef_b);

  platform->par->extract("casedata", "prtRes", prtRes);
  platform->par->extract("casedata", "dumpSol", dumpSol);

  platform->par->extract("casedata", "bp5", runBP5);
  platform->par->extract("casedata", "bp5Repetitions", bp5NReps);

  platform->par->extract("casedata", "bps5", runBPS5);
  platform->par->extract("casedata", "bps5Repetitions", bps5NReps);

  platform->par->extract("casedata", "bp6", runBP6);
  platform->par->extract("casedata", "bp6Repetitions", bp6NReps);

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    *nek::ptr<double>("p_eps") = P_EPS;
  }

  int gsOverlap = 1;
  platform->par->extract("casedata", "gsoverlap", gsOverlap);
  if (!gsOverlap) {
    platform->options.setArgs("ENABLE GS COMM OVERLAP", "FALSE");
  }
}

void UDF_Setup()
{
#if 0
  platform->timer.disable();
#endif
}

void UDF_ExecuteStep(double time, int tstep)
{
  mesh_t *mesh = nrs->meshV;

#if 1
  {
    auto qqth_host = qqt::setup(mesh->ogs, 1, mesh->Nelements * mesh->Np, ogsDfloat, NULL, OOGS_HOSTMPI);
    if (qqt::gpu_mpi()) {
      qqt_t *qqth_device =
          qqt::setup(mesh->ogs, 1, mesh->Nelements * mesh->Np, ogsDfloat, NULL, OOGS_DEVICEMPI);
    }
  }
  {
    auto qqth_host = qqt::setup(mesh->ogs, 1, mesh->Nelements * mesh->Np, ogsPfloat, NULL, OOGS_HOSTMPI);
    if (qqt::gpu_mpi()) {
      qqt_t *qqth_device =
          qqt::setup(mesh->ogs, 1, mesh->Nelements * mesh->Np, ogsPfloat, NULL, OOGS_DEVICEMPI);
    }
  }
#endif

  runBenchmarks(nrs);
}
