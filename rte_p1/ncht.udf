//
// nekRS User Defined File
//
#include "../hmh_solver.hpp"
#include "../rteP1Model.hpp"

// vp
static int updateProperties = 1;

// Robin
std::vector< std::vector<int> > bidRobin;
std::vector<bool> updateScalarImplicitTerm;
deviceMemory<int> o_bidtmp;
occa::memory o_robinSavedLHS;

// P1
static int p1_tid, p1_gid, p1_twrkid, p1_gwrkid;
static dfloat p1_tau, p1_bo, p1_eps;

// tavg
dfloat atime,dtime;
dfloat timel;


#ifdef __okl__

#include "ncht.oudf"

#endif

// helm(h1,h2): h2 += hc * area / mass
occa::memory userScalarImplicitTerm(double time, int scalarId)
{
  auto nrs = dynamic_cast<nrs_t*>(platform->solver);
  auto cds = nrs->cds;
  auto mesh = (scalarId) ? cds->meshV : cds->mesh[0];
  auto o_robinLHS = o_robinSavedLHS.slice(scalarId * nrs->fieldOffset, nrs->fieldOffset);
  
  auto bid = bidRobin.at(scalarId);
  int isEmpty = (bid.size()==0) ? 1 : 0;
     
  const auto hc = P_RTE_EPS / ( 2.0 * P_RTE_TAU * (2.0 - P_RTE_EPS) );
  if (updateScalarImplicitTerm.at(scalarId)) {
    if (platform->comm.mpiRank == 0) {
      std::cout << "updating userImplicitTerm"
                << ", time=" << time
                << ", sid=" << scalarId
                << ", bid=";
      if (isEmpty) {
        std::cout << "none";
      } else {
        for (auto i: bid) { 
          std::cout << i << " ";
        }
      }
      std::cout << ", hc=" << hc
                << "\n";
    }

    if (!isEmpty) {
      o_bidtmp.resize(bid.size());
      o_bidtmp.copyFrom(bid.data(),bid.size());

      // invLMM is 1/dssum(LMM), we want 1/LMM
      o_robinLHS.copyFrom(mesh->o_LMM, mesh->Nlocal);
      platform->linAlg->ady(mesh->Nlocal, 1.0, o_robinLHS);

      // compute area / bm1
      auto o_surfaceAreaRate = mesh->surfaceAreaMultiply(o_bidtmp.length(), o_bidtmp, o_robinLHS);

      platform->linAlg->fill(mesh->Nlocal, hc, o_robinLHS);
      platform->linAlg->axmy(mesh->Nlocal, 1.0, o_surfaceAreaRate, o_robinLHS); // y[n] = a*x[n]*y[n]
    }
    updateScalarImplicitTerm.at(scalarId) = false;
  }

  if (isEmpty) {
    return o_NULL;
  } else { 
    return o_robinLHS;
  }
}

void userq(double time)
{
  rteP1Model::updateSourceTerms(nrs); // update q_fluid for T
}

void uservp(double time)
{
  auto nrs = dynamic_cast<nrs_t*>(platform->solver);
  auto cds = nrs->cds;
  auto mesh = nrs->meshV;
  
  if(updateProperties) {
    const dfloat rho = 1.0;
    const dfloat mue = 1/20.0;                                 // Re = 20
    const dfloat rhoCpFluid = rho * 1.0;
    const dfloat conFluid = mue/10.0;                          // Pr = 10
    const dfloat rhoCpSolid = 1730.0*2048.6/(1923.0*2386.0);   // rhoCp_solid/rhoCp_fluid
    const dfloat conSolid = (1/(20.0*10.0)) * (30.92/1.1);     // cond_solid/xxx
    
    if(platform->comm.mpiRank == 0) {
      std::cout << "updating properties"
                << ", time=" << time
                << ", rho=" << rho 
                << ", mue=" << mue 
                << ", rhoCpFluid=" << rhoCpFluid
                << ", rhoCpSolid=" << rhoCpSolid
                << ", conFluid=" << conFluid
                << ", conSolid=" << conSolid
                << "\n";
    }
    // velocity
    const auto o_mue = nrs->o_prop.slice(0 * nrs->fieldOffset);
    const auto o_rho = nrs->o_prop.slice(1 * nrs->fieldOffset);
    cFill(mesh->Nelements, mue, 0, mesh->o_elementInfo, o_mue);
    cFill(mesh->Nelements, rho, 0, mesh->o_elementInfo, o_rho);
    
    // temperature
    const auto o_rhoCp = cds->o_rho + cds->fieldOffsetScan[p1_tid];
    const auto o_con = cds->o_diff + cds->fieldOffsetScan[p1_tid];
    cFill(cds->mesh[0]->Nelements, conFluid, conSolid, cds->mesh[0]->o_elementInfo, o_con);
    cFill(cds->mesh[0]->Nelements, rhoCpFluid, rhoCpSolid, cds->mesh[0]->o_elementInfo, o_rhoCp);
    updateProperties = 0;
  }
}

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{ 
  rteP1Model::buildKernel(kernelInfo,
                          p1_tid, p1_gid,         // scalar id
                          p1_twrkid, p1_gwrkid,   // usrwrk id
                          p1_tau, p1_bo, p1_eps); // constants
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  // get p1 parameters from par file
  platform->par->extract("casedata", "p1_tid", p1_tid);
  platform->par->extract("casedata", "p1_gid", p1_gid);
  platform->par->extract("casedata", "p1_twrkid", p1_twrkid);
  platform->par->extract("casedata", "p1_gwrkid", p1_gwrkid);

  platform->par->extract("casedata", "p1_tau", p1_tau);
  platform->par->extract("casedata", "p1_bo", p1_bo);
  platform->par->extract("casedata", "p1_eps", p1_eps);
}


void UDF_Setup()
{
  auto nrs = dynamic_cast<nrs_t*>(platform->solver);
  nrs->userScalarSource = &userq;
  nrs->userProperties = &uservp;

  // set up Robin BC id
  bidRobin.resize(nrs->Nscalar, {});
  bidRobin.at(p1_tid).assign({});    // T FIXME: integration by part is needed?
  bidRobin.at(p1_gid).assign({3,4}); // G

  // allocate LHS of Robin
  o_robinSavedLHS = platform->device.malloc<dfloat>(nrs->Nscalar * nrs->fieldOffset);

  // add robin LHS to implicit linear term
  updateScalarImplicitTerm.resize(nrs->Nscalar, true);
  nrs->userScalarImplicitLinearTerm = &userScalarImplicitTerm;

  nrs->o_usrwrk.resize(2 * nrs->fieldOffset);


  { // restart file
    auto printMinMax = [&](std::string tag, dfloat *u, dlong offset, dlong Nlocal)
    {
      dfloat umin = 9e30;
      dfloat umax = -9e30;
      for (dlong i=0; i<Nlocal; i++) {
        dfloat uu = u[offset + i];
        umin = (uu < umin) ? uu : umin;
        umax = (uu > umax) ? uu : umax;
      }
      MPI_Allreduce(MPI_IN_PLACE, &umin, 1, MPI_DFLOAT, MPI_MIN, platform->comm.mpiComm);
      MPI_Allreduce(MPI_IN_PLACE, &umax, 1, MPI_DFLOAT, MPI_MAX, platform->comm.mpiComm);
      if (platform->comm.mpiRank == 0) {
        printf("chk min/max udf_setup: %6s %13.6e %13.6e\n", tag.c_str(), umin, umax);
      }
    };
    auto cds = nrs->cds;
    printMinMax("UX", nrs->U, 0 * nrs->fieldOffset, nrs->meshV->Nlocal);
    printMinMax("UY", nrs->U, 1 * nrs->fieldOffset, nrs->meshV->Nlocal);
    printMinMax("UZ", nrs->U, 2 * nrs->fieldOffset, nrs->meshV->Nlocal);
    printMinMax("PR", nrs->P, 0 * nrs->fieldOffset, nrs->meshV->Nlocal);
    printMinMax("T", cds->S, cds->fieldOffsetScan[p1_tid], cds->mesh[0]->Nlocal);
    printMinMax("G", cds->S, cds->fieldOffsetScan[p1_gid], nrs->meshV->Nlocal);
  }


  // IC

  for (int n = 0; n < nrs->meshV->Nlocal; ++n) {
/*
    nrs->U[n + 0 * nrs->fieldOffset] = 0.0; // x-velocity
    nrs->U[n + 1 * nrs->fieldOffset] = 0.0; // y-velocity
    nrs->U[n + 2 * nrs->fieldOffset] = 1.0; // z-velocity
    nrs->P[n] = 0.0; // pressure
*/
    nrs->cds->S[n + nrs->cds->fieldOffsetScan[p1_gid]] = 1.0; // G
  }
/*
  for (int n = 0; n < nrs->cds->mesh[0]->Nlocal; ++n) {
    nrs->cds->S[n + nrs->cds->fieldOffsetScan[p1_tid]] = 1.0; // temperature
  }
*/
}

void UDF_ExecuteStep(double time, int tstep)
{
  auto cds = nrs->cds;
  auto meshV = nrs->meshV;

  if (tstep==0) { // don't let nekrs update G
    rteP1Model::setup(nrs);
    cds->compute[p1_gid] = 0;
    cds->compute[p1_tid] = 0; // FIXME: debug
  }

  // TODO: avg temperature here with linAlg->axpby

  { // P1
    auto o_T = cds->o_S.slice(cds->fieldOffsetScan[p1_tid], cds->fieldOffset[p1_tid]);
    auto o_G = cds->o_S.slice(cds->fieldOffsetScan[p1_gid], cds->fieldOffset[p1_gid]);

    // Update BC with T 
    nrs->o_usrwrk.copyFrom(o_T, cds->mesh[0]->Nlocal, p1_twrkid*nrs->fieldOffset);

    // Solve G
    if (tstep>0) { // FIXME: solve G from step 1?
      rteP1Model::solve(nrs, time, tstep);
    }

    // Update BC with new G
    nrs->o_usrwrk.copyFrom(o_G, meshV->Nlocal, p1_gwrkid*nrs->fieldOffset);
  }

/*
  if (tstep==0) { // clipping
    clip(mesh->Nelements, 1.0, 4.0, o_T);
    clip(mesh->Nelements, 1.0, 4.0, o_G);
  }
*/

  // Print min/max
//  if (tstep%100 == 0) {
    auto printMinMax = [&](std::string tag, const occa::memory& o_u)
    {
      const auto Nlocal = o_u.length();
      const auto umin = platform->linAlg->min(Nlocal, o_u, platform->comm.mpiComm);
      const auto umax = platform->linAlg->max(Nlocal, o_u, platform->comm.mpiComm);
      if (platform->comm.mpiRank == 0) {
        printf("chk min/max %d %2.4e %6s %13.6e %13.6e\n", tstep, time, tag.c_str(), umin, umax);
      }
    };
    printMinMax("UX", nrs->o_U.slice(0 * nrs->fieldOffset, meshV->Nlocal));
    printMinMax("UY", nrs->o_U.slice(1 * nrs->fieldOffset, meshV->Nlocal));
    printMinMax("UZ", nrs->o_U.slice(2 * nrs->fieldOffset, meshV->Nlocal));
    printMinMax("PR", nrs->o_P.slice(0 * nrs->fieldOffset, meshV->Nlocal));
    printMinMax("T", cds->o_S.slice(cds->fieldOffsetScan[p1_tid], cds->mesh[0]->Nlocal));
    printMinMax("G", cds->o_S.slice(cds->fieldOffsetScan[p1_gid], meshV->Nlocal));
//  }



/*
  if ((tstep%20 == 0) && (tstep > 1)) {
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }
*/
}
