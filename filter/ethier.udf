#include "randomVector.hpp"
#include "linspaceVector.hpp"

#include "nekFilter.hpp"

static dfloat P_U0;
static dfloat P_V0;
static dfloat P_W0;

static dfloat P_A0;
static dfloat P_D0;

static dfloat P_OMEGA;
static dfloat P_AMP;

int p_filterNc_v, p_filterNc_t;
double p_filterWght_v, p_filterWght_t;

#ifdef __okl__

@kernel void dpdx(const dlong Ntotal,
                  const double time,
                  @ restrict const dfloat *x,
                  @ restrict const dfloat *y,
                  @ restrict const dfloat *z,
                  const dlong offset,
                  @ restrict dfloat *FS)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    if (n < Ntotal) {
      const dfloat xn = x[n];
      const dfloat yn = y[n];
      const dfloat zn = z[n];
      //
      const dfloat a = p_A;
      const dfloat d = p_D;
      //
      const dfloat xx = xn - p_U0 * time;
      const dfloat yy = yn - p_V0 * time;
      const dfloat zz = zn - p_W0 * time;
      //
      const dfloat exy = exp(a * (xx + yy));
      const dfloat eyz = exp(a * (yy + zz));
      const dfloat ezx = exp(a * (zz + xx));
      //
      const dfloat sxy = sin(a * xx + d * yy);
      const dfloat syz = sin(a * yy + d * zz);
      const dfloat szx = sin(a * zz + d * xx);
      //
      const dfloat cxy = cos(a * xx + d * yy);
      const dfloat cyz = cos(a * yy + d * zz);
      const dfloat czx = cos(a * zz + d * xx);
      //
      const dfloat dpdx =
          -0.5f * (a * a * exp(-2.f * d * d * p_nu * time) *
                   (2.f * a * exp(2.f * a * xx) + 2.f * a * cxy * czx * eyz + 2.f * d * czx * cyz * exy +
                    2.f * a * cxy * syz * ezx + 2.f * a * cyz * szx * exy - 2.f * a * sxy * syz * ezx -
                    2.f * d * sxy * szx * eyz));

      FS[n + offset] = -dpdx;
    }
  }
}

void exact(dfloat *u,
           dfloat *v,
           dfloat *w,
           dfloat *p,
           const dfloat x,
           const dfloat y,
           const dfloat z,
           const double t,
           const dfloat visc)
{
  const dfloat a = p_A;
  const dfloat d = p_D;

  const dfloat xx = x - p_U0 * t;
  const dfloat yy = y - p_V0 * t;
  const dfloat zz = z - p_W0 * t;

  const dfloat ex = exp(a * xx);
  const dfloat ey = exp(a * yy);
  const dfloat ez = exp(a * zz);
  const dfloat e2t = exp(-visc * d * d * t);

  const dfloat exy = exp(a * (xx + yy));
  const dfloat eyz = exp(a * (yy + zz));
  const dfloat ezx = exp(a * (zz + xx));

  const dfloat sxy = sin(a * xx + d * yy);
  const dfloat syz = sin(a * yy + d * zz);
  const dfloat szx = sin(a * zz + d * xx);

  const dfloat cxy = cos(a * xx + d * yy);
  const dfloat cyz = cos(a * yy + d * zz);
  const dfloat czx = cos(a * zz + d * xx);

  *(u) = -a * (ex * syz + ez * cxy) * e2t + p_U0;
  *(v) = -a * (ey * szx + ex * cyz) * e2t + p_V0;
  *(w) = -a * (ez * sxy + ey * czx) * e2t + p_W0;

  *(p) =
      -0.5 * a * a * e2t * e2t *
      (ex * ex + 2.0 * sxy * czx * eyz + ey * ey + 2.0 * syz * cxy * ezx + ez * ez + 2.0 * szx * cyz * exy);
}

void grad_u(dfloat *grad_u_x,
            dfloat *grad_u_y,
            dfloat *grad_u_z,
            const dfloat x,
            const dfloat y,
            const dfloat z,
            const double t,
            const dfloat visc)
{
  const dfloat a = p_A;
  const dfloat d = p_D;

  const dfloat xx = x - p_U0 * t;
  const dfloat yy = y - p_V0 * t;
  const dfloat zz = z - p_W0 * t;

  const dfloat ex = exp(a * xx);
  const dfloat ey = exp(a * yy);
  const dfloat ez = exp(a * zz);
  const dfloat e2t = exp(-visc * d * d * t);

  const dfloat exy = exp(a * (xx + yy));
  const dfloat eyz = exp(a * (yy + zz));
  const dfloat ezx = exp(a * (zz + xx));

  const dfloat sxy = sin(a * xx + d * yy);
  const dfloat syz = sin(a * yy + d * zz);
  const dfloat szx = sin(a * zz + d * xx);

  const dfloat cxy = cos(a * xx + d * yy);
  const dfloat cyz = cos(a * yy + d * zz);
  const dfloat czx = cos(a * zz + d * xx);

  //*(u)= -a*(ex*syz + ez*cxy)*e2t;
  *(grad_u_x) = -a * ((a * ex) * syz - a * ez * sxy) * e2t;
  *(grad_u_y) = -a * (ex * (a * cyz) + ez * (-d * sxy)) * e2t;
  *(grad_u_z) = -a * (ex * (d * cyz) + (a * ez) * cxy) * e2t;
}

@kernel void exactUVWP(const dlong Ntotal,
                       const double time,
                       @ restrict const dfloat *X,
                       @ restrict const dfloat *Y,
                       @ restrict const dfloat *Z,
                       const dlong offset,
                       @ restrict dfloat *P,
                       @ restrict dfloat *U)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    if (n < Ntotal) {
      dfloat u, v, w, p;
      const dfloat x = X[n];
      const dfloat y = Y[n];
      const dfloat z = Z[n];
      exact(&u, &v, &w, &p, x, y, z, time, p_nu);
      U[n + 0 * offset] = u;
      U[n + 1 * offset] = v;
      U[n + 2 * offset] = w;
      P[n] = p;
    }
  }
}

void velocityDirichletConditions(bcData *bc)
{
  dfloat u, v, w, p;
  exact(&u, &v, &w, &p, bc->x, bc->y, bc->z, bc->time, p_nu);
  bc->u = u;
  bc->v = v;
  bc->w = w;
}

void scalarDirichletConditions(bcData *bc)
{
  dfloat u, v, w, p;
  exact(&u, &v, &w, &p, bc->x, bc->y, bc->z, bc->time, p_nu);
  bc->s = u;
}

void scalarNeumannConditions(bcData *bc)
{
  dfloat grad_u_x, grad_u_y, grad_u_z;
  grad_u(&grad_u_x, &grad_u_y, &grad_u_z, bc->x, bc->y, bc->z, bc->time, p_nu);
  bc->flux = p_nu * (grad_u_x * bc->nx + grad_u_y * bc->ny + grad_u_z * bc->nz);
}

#endif

void userq(double time)
{
  auto nrs = dynamic_cast<nrs_t*>(platform->solver);
  mesh_t *mesh = nrs->meshV;
  cds_t *cds = nrs->cds;
  const dlong Nlocal = nrs->meshV->Nelements * nrs->meshV->Np;

  dpdx(Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, 0 * cds->fieldOffset[0], nrs->cds->o_NLT);
}

void UDF_LoadKernels(deviceKernelProperties& kernelInfo)
{
  setupAide &options = platform->options;

  dfloat mue, rho;
  options.getArgs("VISCOSITY", mue);
  options.getArgs("DENSITY", rho);
  kernelInfo.define("p_nu") = mue / rho;
  kernelInfo.define("p_U0") = P_U0;
  kernelInfo.define("p_V0") = P_V0;
  kernelInfo.define("p_W0") = P_W0;
  kernelInfo.define("p_A") = P_A0 * M_PI;
  kernelInfo.define("p_D") = P_D0 * M_PI;
  kernelInfo.define("p_amp") = P_AMP;
  kernelInfo.define("p_omega") = P_OMEGA;
  kernelInfo.define("p_pi") = M_PI;

  nekFilter::buildKernel(kernelInfo);
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  auto nrs = dynamic_cast<nrs_t*>(platform->solver);

  platform->par->extract("casedata", "p_u0", P_U0);
  platform->par->extract("casedata", "p_v0", P_V0);
  platform->par->extract("casedata", "p_w0", P_W0);
  platform->par->extract("casedata", "p_a0", P_A0);
  platform->par->extract("casedata", "p_d0", P_D0);
  platform->par->extract("casedata", "p_omega", P_OMEGA);
  platform->par->extract("casedata", "p_amp", P_AMP);

  platform->par->extract("casedata", "p_vel_filternc", p_filterNc_v);
  platform->par->extract("casedata", "p_temp_filternc", p_filterNc_t);
  platform->par->extract("casedata", "p_vel_filterwght", p_filterWght_v);
  platform->par->extract("casedata", "p_temp_filterwght", p_filterWght_t);

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    *nek::ptr<double>("p_u0") = P_U0;
    *nek::ptr<double>("p_v0") = P_V0;
    *nek::ptr<double>("p_w0") = P_W0;

    *nek::ptr<double>("p_a0") = P_A0;
    *nek::ptr<double>("p_d0") = P_D0;
    *nek::ptr<double>("p_omega") = P_OMEGA;
    *nek::ptr<double>("p_amp") = P_AMP;

    *nek::ptr<int>("p_filternc_v") = p_filterNc_v;
    *nek::ptr<int>("p_filternc_t") = p_filterNc_t;
    *nek::ptr<double>("p_filterwght_v") = p_filterWght_v;
    *nek::ptr<double>("p_filterwght_t") = p_filterWght_t;
  }
}

void UDF_Setup()
{
  auto nrs = dynamic_cast<nrs_t*>(platform->solver);
  cds_t *cds = nrs->cds;
  nekFilter::setup("vel", nrs->meshV, p_filterNc_v, p_filterWght_v);
  nekFilter::setup("temp", cds->mesh[0], p_filterNc_t, p_filterWght_t);
}

void UDF_ExecuteStep(double time, int tstep)
{
  auto nrs = dynamic_cast<nrs_t*>(platform->solver);
  mesh_t *mesh = nrs->meshV;
  cds_t *cds = nrs->cds;

  if (tstep <= 5) {
    exactUVWP(mesh->Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, nrs->fieldOffset, nrs->o_P, nrs->o_U);
  }

  if (nrs->isCheckpointStep) { // first call to copy solutions
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }

  { // apply explicit filter
    auto o_UX = nrs->o_U + 0 * nrs->fieldOffset;
    auto o_UY = nrs->o_U + 1 * nrs->fieldOffset;
    auto o_UZ = nrs->o_U + 2 * nrs->fieldOffset;
  
    nekFilter::apply("vel", o_UX);
    nekFilter::apply("vel", o_UY);
    nekFilter::apply("vel", o_UZ);
    nekFilter::apply("vel", nrs->o_P);
  
    for (int is = 0; is < cds->NSfields; is++) {
      if (!cds->compute[is] || cds->cvodeSolve[is]) {
        continue;
      }
      auto o_Si = cds->o_S + cds->fieldOffsetScan[is];
      nekFilter::apply("temp", o_Si);
    }
  }

  if (nrs->isCheckpointStep) { // second call for checking nek's filter
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }
}
