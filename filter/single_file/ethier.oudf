
// Tensor contraction: U = (fMT x fMT x fMT) U
@kernel void filterTensor3(const dlong Nelements,
                          @ restrict const dfloat *fMT,
                          @ restrict dfloat *U)
{
  for (dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_FT[p_Nq][p_Nq];

    @exclusive dfloat r_Un[p_Nq];
    @exclusive dfloat r_U[p_Nq];

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
        const int id = i + j * p_Nq;
        s_FT[j][i] = fMT[id];

#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; ++k)
          r_Un[k] = 0.f;
      }
    }

    @barrier();

    // read and multiply in k
    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; ++k) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          const dfloat uc = U[id];

          // Could be hold for less global reads
          r_U[k] = uc;

#pragma unroll p_Nq
          for (int n = 0; n < p_Nq; ++n) {
            const dfloat Ik = s_FT[k][n];
            r_Un[n] += Ik * uc;
          }
        }
      }
    }

    @barrier();

// loop around slices
#pragma unroll p_Nq
    for (int k = 0; k < p_Nq; ++k) {
      // load slice to @shared
      for (int j = 0; j < p_Nq; ++j; @inner(1))
        for (int i = 0; i < p_Nq; ++i; @inner(0))
          s_U[j][i] = r_Un[k];

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          r_Un[k] = 0.f;
#pragma unroll p_Nq
          for (int n = 0; n < p_Nq; n++) {
            const dfloat Ii = s_FT[n][i];
            r_Un[k] += Ii * s_U[j][n];
          }
        }
      }

      @barrier();
      // load multiplied data to shared
      for (int j = 0; j < p_Nq; ++j; @inner(1))
        for (int i = 0; i < p_Nq; ++i; @inner(0))
          s_U[j][i] = r_Un[k];

      @barrier();

      for (int j = 0; j < p_Nq; ++j; @inner(1)) {
        for (int i = 0; i < p_Nq; ++i; @inner(0)) {
          r_Un[k] = 0.f;

#pragma unroll p_Nq
          for (int n = 0; n < p_Nq; n++) {
            const dfloat Ij = s_FT[n][j];
            r_Un[k] += Ij * s_U[n][i];
          }
        }
      }

      @barrier();
    }

    for (int j = 0; j < p_Nq; ++j; @inner(1)) {
      for (int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for (int k = 0; k < p_Nq; ++k) {
          const dlong id = e * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          U[id] = r_Un[k];
        }
      }
    }

  } // loop e
} // func


// User device kernels and device functions
@kernel void dpdx(const dlong Ntotal,
                  const double time,
                  @ restrict const dfloat *x,
                  @ restrict const dfloat *y,
                  @ restrict const dfloat *z,
                  const dlong offset,
                  @ restrict dfloat *FS)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    if (n < Ntotal) {
      const dfloat xn = x[n];
      const dfloat yn = y[n];
      const dfloat zn = z[n];
      //
      const dfloat a = p_A;
      const dfloat d = p_D;
      //
      const dfloat xx = xn - p_U0 * time;
      const dfloat yy = yn - p_V0 * time;
      const dfloat zz = zn - p_W0 * time;
      //
      const dfloat exy = exp(a * (xx + yy));
      const dfloat eyz = exp(a * (yy + zz));
      const dfloat ezx = exp(a * (zz + xx));
      //
      const dfloat sxy = sin(a * xx + d * yy);
      const dfloat syz = sin(a * yy + d * zz);
      const dfloat szx = sin(a * zz + d * xx);
      //
      const dfloat cxy = cos(a * xx + d * yy);
      const dfloat cyz = cos(a * yy + d * zz);
      const dfloat czx = cos(a * zz + d * xx);
      //
      const dfloat dpdx =
          -0.5f * (a * a * exp(-2.f * d * d * p_nu * time) *
                   (2.f * a * exp(2.f * a * xx) + 2.f * a * cxy * czx * eyz + 2.f * d * czx * cyz * exy +
                    2.f * a * cxy * syz * ezx + 2.f * a * cyz * szx * exy - 2.f * a * sxy * syz * ezx -
                    2.f * d * sxy * szx * eyz));

      FS[n + offset] = -dpdx;
    }
  }
}

void exact(dfloat *u,
           dfloat *v,
           dfloat *w,
           dfloat *p,
           const dfloat x,
           const dfloat y,
           const dfloat z,
           const double t,
           const dfloat visc)
{
  const dfloat a = p_A;
  const dfloat d = p_D;

  const dfloat xx = x - p_U0 * t;
  const dfloat yy = y - p_V0 * t;
  const dfloat zz = z - p_W0 * t;

  const dfloat ex = exp(a * xx);
  const dfloat ey = exp(a * yy);
  const dfloat ez = exp(a * zz);
  const dfloat e2t = exp(-visc * d * d * t);

  const dfloat exy = exp(a * (xx + yy));
  const dfloat eyz = exp(a * (yy + zz));
  const dfloat ezx = exp(a * (zz + xx));

  const dfloat sxy = sin(a * xx + d * yy);
  const dfloat syz = sin(a * yy + d * zz);
  const dfloat szx = sin(a * zz + d * xx);

  const dfloat cxy = cos(a * xx + d * yy);
  const dfloat cyz = cos(a * yy + d * zz);
  const dfloat czx = cos(a * zz + d * xx);

  *(u) = -a * (ex * syz + ez * cxy) * e2t + p_U0;
  *(v) = -a * (ey * szx + ex * cyz) * e2t + p_V0;
  *(w) = -a * (ez * sxy + ey * czx) * e2t + p_W0;

  *(p) =
      -0.5 * a * a * e2t * e2t *
      (ex * ex + 2.0 * sxy * czx * eyz + ey * ey + 2.0 * syz * cxy * ezx + ez * ez + 2.0 * szx * cyz * exy);
}

void grad_u(dfloat *grad_u_x,
            dfloat *grad_u_y,
            dfloat *grad_u_z,
            const dfloat x,
            const dfloat y,
            const dfloat z,
            const double t,
            const dfloat visc)
{
  const dfloat a = p_A;
  const dfloat d = p_D;

  const dfloat xx = x - p_U0 * t;
  const dfloat yy = y - p_V0 * t;
  const dfloat zz = z - p_W0 * t;

  const dfloat ex = exp(a * xx);
  const dfloat ey = exp(a * yy);
  const dfloat ez = exp(a * zz);
  const dfloat e2t = exp(-visc * d * d * t);

  const dfloat exy = exp(a * (xx + yy));
  const dfloat eyz = exp(a * (yy + zz));
  const dfloat ezx = exp(a * (zz + xx));

  const dfloat sxy = sin(a * xx + d * yy);
  const dfloat syz = sin(a * yy + d * zz);
  const dfloat szx = sin(a * zz + d * xx);

  const dfloat cxy = cos(a * xx + d * yy);
  const dfloat cyz = cos(a * yy + d * zz);
  const dfloat czx = cos(a * zz + d * xx);

  //*(u)= -a*(ex*syz + ez*cxy)*e2t;
  *(grad_u_x) = -a * ((a * ex) * syz - a * ez * sxy) * e2t;
  *(grad_u_y) = -a * (ex * (a * cyz) + ez * (-d * sxy)) * e2t;
  *(grad_u_z) = -a * (ex * (d * cyz) + (a * ez) * cxy) * e2t;
}

@kernel void exactUVWP(const dlong Ntotal,
                       const double time,
                       @ restrict const dfloat *X,
                       @ restrict const dfloat *Y,
                       @ restrict const dfloat *Z,
                       const dlong offset,
                       @ restrict dfloat *P,
                       @ restrict dfloat *U)
{
  for (dlong n = 0; n < Ntotal; ++n; @tile(p_blockSize, @outer, @inner)) {
    if (n < Ntotal) {
      dfloat u, v, w, p;
      const dfloat x = X[n];
      const dfloat y = Y[n];
      const dfloat z = Z[n];
      exact(&u, &v, &w, &p, x, y, z, time, p_nu);
      U[n + 0 * offset] = u;
      U[n + 1 * offset] = v;
      U[n + 2 * offset] = w;
      P[n] = p;
    }
  }
}

// Boundary conditions
void velocityDirichletConditions(bcData *bc)
{
  dfloat u, v, w, p;
  exact(&u, &v, &w, &p, bc->x, bc->y, bc->z, bc->time, p_nu);
  bc->u = u;
  bc->v = v;
  bc->w = w;
}

void scalarDirichletConditions(bcData *bc)
{
  dfloat u, v, w, p;
  exact(&u, &v, &w, &p, bc->x, bc->y, bc->z, bc->time, p_nu);
  bc->s = u;
}

void scalarNeumannConditions(bcData *bc)
{
  dfloat grad_u_x, grad_u_y, grad_u_z;
  grad_u(&grad_u_x, &grad_u_y, &grad_u_z, bc->x, bc->y, bc->z, bc->time, p_nu);
  bc->flux = p_nu * (grad_u_x * bc->nx + grad_u_y * bc->ny + grad_u_z * bc->nz);
}
