c
c  Exact fully 3D Navier-Stokes benchmark
c   
c  Reference:
c
c    C Ross Ethier, David Steinman,
c    Exact fully 3D Navier-Stokes solutions for benchmarking,
c    International Journal for Numerical Methods in Fluids,
c    Volume 19, Number 5, March 1994, pages 369-375.
c
c  Setup:
c
c    [-1,1] cube centered at (0,0,0), 
c    from t = 0 to t = 0.1, with parameters a = PI/4 and d = PI/2,
c    and with Dirichlet boundary conditions on all faces of the cube.

C-----------------------------------------------------------------------
      subroutine chk_error()
      include 'SIZE'
      include 'TOTAL'

      real uxe  (lx1*ly1*lz1*lelv)
      real uye  (lx1*ly1*lz1*lelv)
      real uze  (lx1*ly1*lz1*lelv)
      real uxerr(lx1*ly1*lz1*lelv)
      real uyerr(lx1*ly1*lz1*lelv)
      real uzerr(lx1*ly1*lz1*lelv)
      real terr (lx1*ly1*lz1*lelv)

      real pre  (lx2,ly2,lz2,lelv)
      real prerr(lx2,ly2,lz2,lelv)

      real err(4)
      save err 

      call nekrs_registerPtr('errors', err)

      n  = nelv*nx1*ny1*nz1
      n2 = nelv*nx2*ny2*nz2

      call exactu(uxe,uye,uze,xm1,ym1,zm1,n)
      call exactp(pre,xm2,ym2,zm2,n2)

      call sub3(uxerr,vx,uxe,n)
      call sub3(uyerr,vy,uye,n)
      call sub3(uzerr,vz,uze,n)
      uxerrl2 = glsc3(uxerr,bm1,uxerr,n)
      uxerrl2 = sqrt(uxerrl2)

      call sub3(terr,t,uxe,n)
      terrl2 = glsc3(terr,bm1,terr,n)
      terrl2 = sqrt(terrl2)

      call sub3(terr,t(1,1,1,1,2),uxe,n)
      serrl2 = glsc3(terr,bm1,terr,n)
      serrl2 = sqrt(serrl2)

      ! ensure both have zero mean 
      pbre  = glsc2(pre,bm2,n2)/volvm2
      call cadd(pre,-pbre,n2)
      pbar  = glsc2(pr ,bm2,n2)/volvm2
      call cadd(pr,-pbar,n2)

      call sub3(prerr,pr,pre,n2)
      prerrl2 = glsc3(prerr,bm2,prerr,n2)
      prerrl2 = sqrt(prerrl2)

      err(1) = uxerrl2
      err(2) = prerrl2
      err(3) = terrl2
      err(4) = serrl2

      if (nid.eq.nio) write(6,*) istep,time,uxerrl2,prerrl2,
     &                           terrl2,serrl2,' L2 err'
      return
      end
C-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'

      integer istep_prev
      save istep_prev
      data istep_prev /-1/

      if (istep.ne.istep_prev) then  ! this is the first call of userchk in this step
         istep_prev = istep

         call my_nek5k_testbed

      else ! second call

         call my_compare

      endif

      call chk_error

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat0() ! test
      include 'SIZE'
      include 'CASEDATA'

      integer p_filterNc_v, p_filterNc_t
      real p_filterWght_v, p_filterWght_t
      common /my_idata/ p_filterNc_v, p_filterNc_t
      common /my_rdata/ p_filterWght_v, p_filterWght_t

      call nekrs_registerPtr('p_u0', p_u0);
      call nekrs_registerPtr('p_v0', p_v0);
      call nekrs_registerPtr('p_w0', p_w0);

      call nekrs_registerPtr('p_a0', p_a0);
      call nekrs_registerPtr('p_d0', p_d0);
      call nekrs_registerPtr('p_omega', p_omega);
      call nekrs_registerPtr('p_amp', p_amp);

      call nekrs_registerPtr('p_filternc_v', p_filterNc_v);
      call nekrs_registerPtr('p_filternc_t', p_filterNc_t);
      call nekrs_registerPtr('p_filterwght_v', p_filterWght_v);
      call nekrs_registerPtr('p_filterwght_t', p_filterWght_t);

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'
      include 'CASEDATA'

      call rescale_x(xm1,-1.0,1.0)
      call rescale_x(ym1,-1.0,1.0)
      call rescale_x(zm1,-1.0,1.0)

      do iel=1,nelt
      do ifc=1,2*ndim
         if (cbc(ifc,iel,1) .eq. 'EXO') boundaryID(ifc,iel) = 1
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      integer e,eg

      call exactu(ux,uy,uz,x,y,z,1)
      temp = ux

      return
      end
c-----------------------------------------------------------------------
      subroutine exactu(uxe,uye,uze,x,y,z,n)
      include 'SIZE'
      include 'TOTAL'
      include 'CASEDATA'

      real uxe(n),uye(n),uze(n)
      real x(n),y(n),z(n)


      real w1(lx1*ly1*lz1*lelt)

      a = P_A0*pi
      d = P_D0*pi

      call uvwp_ethier(param(2),a,d,n,x,y,z,time,uxe,uye,uze,w1)

      return
      end
c-----------------------------------------------------------------------
      subroutine exactp(pre,x,y,z,n)
      include 'SIZE'
      include 'TOTAL'
      include 'CASEDATA'

      real pre(n)
      real x(n),y(n),z(n)

      real w1(lx1*ly1*lz1*lelt)
      a = P_A0*pi
      d = P_D0*pi

      call uvwp_ethier(param(2),a,d,n,x,y,z,time,w1,w1,w1,pre)

c      call ortho(pre)

      return
      end
c-----------------------------------------------------------------------
      subroutine uvwp_ethier (nu,a,d,n,x,y,z,t,u,v,w,p)

      implicit none
      include 'CASEDATA'

      integer n

      real nu
      real a
      real cxy(n)
      real cyz(n)
      real czx(n)
      real d
      real e2t
      real ex(n)
      real exy(n)
      real ey(n)
      real eyz(n)
      real ez(n)
      real ezx(n)
      integer i
      real p(n)
      real sxy(n)
      real syz(n)
      real szx(n)
      real t
      real u(n)
      real v(n)
      real w(n)
      real x(n)
      real y(n)
      real z(n)
      
      real xx, yy, zz   
      do i = 1, n

        xx = x(i) - P_U0*t
        yy = y(i) - P_V0*t
        zz = z(i) - P_W0*t

        ex(i) = exp ( a * xx )
        ey(i) = exp ( a * yy )
        ez(i) = exp ( a * zz )

        e2t = exp  ( - nu * d * d * t )

        exy(i) = exp ( a * ( xx + yy ) )
        eyz(i) = exp ( a * ( yy + zz ) )
        ezx(i) = exp ( a * ( zz + xx ) )

        sxy(i) = sin ( a * xx + d * yy )
        syz(i) = sin ( a * yy + d * zz )
        szx(i) = sin ( a * zz + d * xx )

        cxy(i) = cos ( a * xx + d * yy )
        cyz(i) = cos ( a * yy + d * zz )
        czx(i) = cos ( a * zz + d * xx )

        u(i) = - a * ( ex(i) * syz(i) + ez(i) * cxy(i) ) * e2t + P_U0
        v(i) = - a * ( ey(i) * szx(i) + ex(i) * cyz(i) ) * e2t + P_V0
        w(i) = - a * ( ez(i) * sxy(i) + ey(i) * czx(i) ) * e2t + P_W0
        p(i) = - 0.5D+00 * a * a * e2t * e2t * (
     &    + ex(i) * ex(i) + 2.0D+00 * sxy(i) * czx(i) * eyz(i)
     &    + ey(i) * ey(i) + 2.0D+00 * syz(i) * cxy(i) * ezx(i)
     &    + ez(i) * ez(i) + 2.0D+00 * szx(i) * cyz(i) * exy(i) )

      end do

      return
      end
c-----------------------------------------------------------------------
      subroutine my_nek5k_testbed
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer lt, i, nv, nt
      parameter (lt=lx1*ly1*lz1*lelv)

      real u_wrk
      common /my_test_fld/ u_wrk(lt,ldim+1+ldimt)

      real intv, intt
      common /my_filter/ intv(lx1,lx1), intt(lx1,lx1)

      integer p_filterNc_v, p_filterNc_t
      real p_filterWght_v, p_filterWght_t
      common /my_idata/ p_filterNc_v, p_filterNc_t
      common /my_rdata/ p_filterWght_v, p_filterWght_t

      real wk1(lx1,lx1,lx1,lelt)
      real wk2(lx1,lx1,lx1)
      real wk3(lx1,lx1)
      real wk4

      integer icalld
      data icalld /0/
      save icalld

      if (ldim.ne.3) call exitti('Only works for 3D$',1)
      if (lx1.ne.lx2) call exitti('Only works for PNPN$',1)

      nv = lx1*ly1*lz1*nelv
      nt = lx1*ly1*lz1*nelt

      ! filter setup
      if (icalld.eq.0) then 
         call my_filter_setup(p_filterNc_v, p_filterWght_v, intv)
         call my_filter_setup(p_filterNc_t, p_filterWght_t, intt)
         icalld = 1
      endif

      ! copy to work array
      call copy(u_wrk(1,1), vx, nv)
      call copy(u_wrk(1,2), vy, nv)
      call copy(u_wrk(1,3), vz, nv)
      call copy(u_wrk(1,4), pr, nv)

      do i=1,npscal+1
         call copy(u_wrk(1,4+i), t(1,1,1,1,i), nt)
      enddo

      ! apply filter
      call filterq(u_wrk(1,1),intv,lx1,lz1,wk1,wk2,wk3,if3d,wk4)
      call filterq(u_wrk(1,2),intv,lx1,lz1,wk1,wk2,wk3,if3d,wk4)
      call filterq(u_wrk(1,3),intv,lx1,lz1,wk1,wk2,wk3,if3d,wk4)
      call filterq(u_wrk(1,4),intv,lx1,lz1,wk1,wk2,wk3,if3d,wk4)

      do i=1,npscal+1
         call filterq(u_wrk(1,4+i),intt,lx1,lz1,wk1,wk2,wk3,if3d,wk4)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine my_compare
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer lt, i, nv, nt
      parameter (lt=lx1*ly1*lz1*lelv)

      real u_wrk
      common /my_test_fld/ u_wrk(lt,4+ldimt)

      real err(50), glamax

      nv = lx1*ly1*lz1*nelv
      nt = lx1*ly1*lz1*nelt

      ! max abs of ref sol.
      err(1) = glamax(u_wrk(1,1),nv)
      err(2) = glamax(u_wrk(1,2),nv)
      err(3) = glamax(u_wrk(1,3),nv)
      err(4) = glamax(u_wrk(1,4),nv)
      do i=1,npscal+1
         err(4+i) = glamax(u_wrk(1,4+i),nt)
      enddo

      ! compute error
      call sub2(u_wrk(1,1),vx,nv)
      call sub2(u_wrk(1,2),vy,nv)
      call sub2(u_wrk(1,3),vz,nv)
      call sub2(u_wrk(1,4),pr,nv)

      do i=1,npscal+1
         call sub2(u_wrk(1,4+i),t(1,1,1,1,i),nt)
      enddo

      err(1) = glamax(u_wrk(1,1),nv) / err(1)
      err(2) = glamax(u_wrk(1,2),nv) / err(2)
      err(3) = glamax(u_wrk(1,3),nv) / err(3)
      err(4) = glamax(u_wrk(1,4),nv) / err(4)
      do i=1,npscal+1
         err(4+i) = glamax(u_wrk(1,4+i),nt) / err(4+i)
      enddo

      if (nio.eq.0) then
         write(6,1,advance="no") istep,err(1),err(2),err(3),err(4)
         write(6,'(1p50e12.4)') (err(i+4),i=1,npscal+1)
      endif

    1 format(4x,i7,' qfilt:',1p4e12.4)
      return
      end
c-----------------------------------------------------------------------
      subroutine my_filter_setup(ncut, wght, intv)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer ncut, i, j
      real intv(lx1,lx1), wght

      if (ncut.eq.0) return
      if (wght.le.0) return
      if (ifaxis) call exitti('Filtering not supported w/ IFAXIS!$',1)

      call build_new_filter(intv,zgm1,lx1,ncut,wght,nio)

      if (nio.eq.0.AND.loglevel.gt.2) then
         do j=1,lx1
            write(6,1) (intv(i,j),i=1,lx1)
         enddo
      endif
    1 format('filt mat (5k):',1p50e12.4)

      return
      end
c-----------------------------------------------------------------------

